# reads from

import argparse
import datetime
import json
import logging
import os
import pdb
import sys
import time

import requests

import paths_and_headers

headers = paths_and_headers.headers

data_path = paths_and_headers.data_path

logger = paths_and_headers.logger

SRTS_JSON_FILENAME = paths_and_headers.api_info_filename

LANGUAGE_SRT_FILENAME = paths_and_headers.language_srt_map


def update_language_srt_map():
    """Update the language_srt_map from the api_info_map"""

    api_info_map = json.loads(open(data_path + SRTS_JSON_FILENAME).read())
    language_srt_filepath = data_path + LANGUAGE_SRT_FILENAME
    language_srt_map = json.loads(open(language_srt_filepath).read())

    for youtube_id, content in api_info_map.items():
        lang_list = content.get("language_codes") or []
        for code in lang_list:
            # create language section if it doesn't exist
            language_srt_map.get(code)
            if not language_srt_map.get(code):
                logger.info("Creating language section '%s'" % code)
                language_srt_map[code] = {}
            # create entry for video entry if it doesn't exist
            if not language_srt_map[code].get(youtube_id):
                logger.info("Creating entry in '%s' for YouTube video: '%s'" %(code, youtube_id))
                language_srt_map[code][youtube_id] = {
                    "downloaded": False,
                    "api_response": "",
                    "last_attempt": "",
                    "last_success": "",
                }

    logger.info("Writing updates to %s" % language_srt_filepath)
    with open(language_srt_filepath, 'wb') as fp:
            json.dump(language_srt_map, fp)



def download_subtitles(args):
    """Download subtitles specified by command line args"""
    lang_code = args.language
    redo = args.redo
    response_code = args.response_code
    date_since_attempt = args.date_since_attempt
    # json generated from aggregate_video_subtitles.py
    api_info_map = json.loads(open(data_path + SRTS_JSON_FILENAME).read())
    # json generated by download_subtitles.py (this file)
    language_srt_map = json.loads(open(
        data_path + LANGUAGE_SRT_FILENAME).read())

    for youtube_id, content in srts_dict.items():

        entry = language_srt_map[youtube_id]
        last_attempt = entry.get("last_attempt")
        api_response = entry.get("api_response")
        # check if date specified, if so was it before that date

        # check if redo specified, otherwise don't redo the download
        # check if response code is all or if it matches the previous download
        # response code


        # for code in content["language_codes"]:
        # check if language specified
        # subtitles.download_subtitles(youtube_id, code):
        # print "Srts downloaded during this session: %s" %
        # str(success_counter)
def create_parser():
    # parses command line args
    parser = argparse.ArgumentParser()
    parser.add_argument('-l', '--language', default=None,
                        help="Specify a particular language code to download subtitles for. Can be used with -R to update previously downloaded subtitles.")
    parser.add_argument('-R', '--redo', action='store_true',
                        help="Re-download previously downloaded subtitles to refresh the repo. Can be used with -l. Default behavior is to not re-download subtitles we already have.")
    parser.add_argument('-r', '--response_code', default=None,
                        help="Which api-response code to recheck. Can be combined with -d. USAGE: '-r all', '-r client-error', or '-r server-error'. This MUST be set.")
    parser.add_argument('-d', '--date_since_attempt', default=None,
                        help="Setting a date flag will update only those entries which have not been attempted since that date. Can be combined with -r. This could potentially be useful for updating old subtitles. USAGE: '-d MM/DD/YYYY'.")
    parser.add_argument('-U', '--update', action='store_true',
                        help="Use this after updating the mappings with generate_subtitle_map. Will override anything else. It will update the JSON file used to store information about which subtitles have actually been downloaded.")
    return parser


def setup_logging():
    logging.basicConfig(level=logging.DEBUG,
                        format='%(asctime)s %(name)-12s - %(levelname)s: %(message)s',
                        datefmt='%m-%d %H:%M')


if __name__ == '__main__':
    pdb.set_trace()
    setup_logging()
    parser = create_parser()
    args = parser.parse_args()
    if args.update:
        update_language_srt_map()
    elif args.response_code:
        download_subtitles(args)
    else:
        logger.info(
            "Invalid input. Please read the usage instructions more carefully and try again. (P.S. Don't forget to specify a response code.)")
        parser.print_help()
        sys.exit(1)
    logger.info("Process complete.")
    sys.exit(1)
